OOPS PRACTICAL - 5 & 6

Name : Prathamesh Rajbhoj
Branch : CSE
Roll No : A - 53

Aim : 

5. Create a class IPL. The datamembers are Team_Name, total matches played, number of matches won and lost. Create a method Register_Team, which will take Team Name as a Parameter. If the name contains any alphabet or number it will throw a user defined exception “InvalidTeamName”. The exception class will display the message which parameter is not satisfied. 
Create a method update count, which will update the number of matches won and lost. If the sum of number of matches won and lost is not equal to total matches played then throw user defined exception “InvalidCountException”. If the numbers of matches lost are more than 40% then display the message you are disqualified. 

Use proper Exception handling mechanism to handle the exception.  
6. Create a class IPL. The data Team_Name, number of matches won and lost is written in the file name “IPL.txt”.  Read the file and store the data in object. Create array of objects and demonstrate all functionalities of IPL Class defined in Problem definition 5.


Question - 1

IPL.java :
public class IPL {
    String team_name;
    int total_matches;
    int won;
    int lost;
    boolean registered=false;

    IPL() {
    }

    IPL(String team_name, int total_matches, int won, int lost) {
        this.team_name = team_name;
        this.total_matches = total_matches;
        this.won = won;
        this.lost = lost;
    }

    void DisplayTeam() {

        if(this.registered==false){
            System.out.println("Team " + this.team_name + "is not registered\n");
        }
        System.out.println();
        System.out.println("Team Name : " + this.team_name);
        System.out.println("Total Matches : " + this.total_matches);
        System.out.println("Total Won : " + this.won);
        System.out.println("Total Loss : " + this.lost);
        System.out.println();
    }

    void Register_Team() {

        try {
            String name = this.team_name;
            int n = name.length();

            System.out.print(" ---> ");

            for (int i = 0; i < n; i++) {
                char c = name.charAt(i);

                if (c >= 'a' && c <= 'z') {
                    throw new InvalidTeamName("Alphabet Not Allowed in Team Name - { " + this.team_name + " }\n");
                }
                else if (c >= 'A' && c <= 'Z') {
                    throw new InvalidTeamName("Alphabet Not Allowed in Team Name - { " + this.team_name + " }\n");
                }
                else if (c >= '0' && c <= '9') {
                    throw new InvalidTeamName("Numbers Not Allowed in Team Name - { " + this.team_name + " }\n");
                }
            }

            this.registered=true;

            System.out.println("Team { " + this.team_name + " } Registered Succesfully\n");

        } catch (InvalidTeamName e) {
            e.printStackTrace();
        }

    }

    void updateCount(String str) {
        this.total_matches++;

        if (str.equals("Won")) {
            this.won++;
        } else {
            this.lost++;
        }

        try {
            if (this.total_matches != (this.won + this.lost)) {
                throw new InvalidCountException("\nEXCEPTION -- INVALID STATISTICS\n");
            } else {
                System.out.println("\n Team " + this.team_name + " Statistics Verified\n");

                double lost_percentage = ((this.lost* 100.00) / this.total_matches);

                 // System.out.println(this.lost);
                // System.out.println(this.total_matches);
                // System.out.println(lost_percentage + "% \n");

                if (lost_percentage > 40) {
                    System.out.println("\n^^^^ TEAM " + this.team_name + " DISQUALIFIED ^^^^\n");
                    return;
                }
            }

        } catch (InvalidCountException e) {
            e.printStackTrace();
        }
    }
    
}

class InvalidTeamName extends Exception {
    InvalidTeamName(String msg) {
        super(msg);
        System.out.println();
    }

}

class InvalidCountException extends Exception {
    InvalidCountException(String msg) {
        super(msg);
        System.out.println();
    }
}

IPL.txt :
& 6 6 0
&&ABC 8 4 4
&&& 8 5 3
@ 8 0 8
@@ 5 4 1
@@@ 5 3 2
# 6 5 1
##12 10 8 2
### 10 2 8
####a1B 4 1 3


Test.java :

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Test {
    public static void main(String[] args) throws IOException {

        System.out.println();
        System.out.println();

        FileReader fr = null;
        BufferedReader br = null;

        try {
            fr = new FileReader("IPL.txt");
            br = new BufferedReader(fr);

            String line;

            IPL team[] = new IPL[10];
            int index = 0;

            while ((line = br.readLine()) != null) {

                String arr[] = line.split(" ");

                int a = Integer.parseInt(arr[1]);
                int b = Integer.parseInt(arr[2]);
                int c = Integer.parseInt(arr[3]);

                team[index] = new IPL(arr[0], a, b, c);
                team[index].Register_Team();
                index++;
            }

            System.out.println();
            System.out.println();
            System.out.println("*******************************************************************");
            System.out.println("************************ Displaying All Teams *********************");
            System.out.println("*******************************************************************");

            for (int i = 0; i < 10; i++) {
                team[i].DisplayTeam();
            }

            System.out.println();
            System.out.println();
            System.out.println("*******************************************************************");
            System.out.println("************************ Performing Operations *********************");
            System.out.println("*******************************************************************");

            System.out.println();
            System.out.println();
            team[3].updateCount("Won");
            System.out.println("*******************************************************************");
            team[0].updateCount("Loss");
            System.out.println("*******************************************************************");
            team[7].updateCount("Won");
            System.out.println("*******************************************************************");

        } finally {
            fr.close();
            br.close();
        }

        System.out.println();
        System.out.println();
    }
}








 

Output :




